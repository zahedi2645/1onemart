openapi: 3.0.3
info:
  title: PAYNET BNPL â€“ Klarna-like API
  version: '1.0.0'
  description: >
    Reference API for a Klarna-style BNPL with sessions, orders, partial captures,
    partial refunds, webhooks, and optional Hosted Payment Page (HPP).
servers:
  - url: https://api.paynet.example.com
security:
  - bearerAuth: []
paths:
  /v1/checkout/sessions:
    post:
      summary: Create checkout session
      operationId: createCheckoutSession
      security:
        - bearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '200':
          description: Session created
          headers:
            X-Correlation-Id:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
  /v1/checkout/sessions/{session_id}:
    get:
      summary: Get checkout session
      operationId: getCheckoutSession
      parameters:
        - name: session_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    delete:
      summary: Cancel checkout session
      operationId: cancelCheckoutSession
      parameters:
        - name: session_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Session canceled
  /v1/orders:
    post:
      summary: Create order from session and selected BNPL plan
      operationId: createOrder
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order authorized
          headers:
            X-Correlation-Id:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /v1/orders/{order_id}:
    get:
      summary: Get order
      operationId: getOrder
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    patch:
      summary: Update mutable order fields
      operationId: updateOrder
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /v1/orders/{order_id}/cancel:
    post:
      summary: Cancel an order before any capture
      operationId: cancelOrder
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order canceled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /v1/orders/{order_id}/captures:
    post:
      summary: Capture full or partial amount for shipped items
      operationId: createCapture
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
        - name: Idempotency-Key
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaptureRequest'
      responses:
        '200':
          description: Capture created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
  /v1/orders/{order_id}/refunds:
    post:
      summary: Refund full or partial amount (optionally tied to a capture)
      operationId: createRefund
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
        - name: Idempotency-Key
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRefundRequest'
      responses:
        '200':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
  /v1/hpp/session:
    post:
      summary: Create Hosted Payment Page session (optional flow)
      operationId: createHppSession
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHppRequest'
      responses:
        '200':
          description: HPP session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HppSession'
  /v1/webhooks/test:
    post:
      summary: Send a test webhook event to merchant endpoint
      operationId: sendTestWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestWebhookRequest'
      responses:
        '204':
          description: Sent
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Address:
      type: object
      properties:
        given_name: { type: string }
        family_name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        street_address: { type: string }
        postal_code: { type: string }
        city: { type: string }
        country: { type: string, minLength: 2, maxLength: 2 }
    OrderLine:
      type: object
      required: [reference, name, type, quantity, unit_price, total_amount]
      properties:
        reference: { type: string }
        name: { type: string }
        type:
          type: string
          enum: [physical, digital, discount, shipping, surcharge]
        quantity: { type: integer, minimum: 1 }
        unit_price: { type: integer, description: "Minor units (e.g., cents)" }
        tax_rate: { type: integer, description: "Basis points, e.g., 1900 = 19%" }
        total_amount: { type: integer }
    CreateSessionRequest:
      type: object
      required: [merchant_id, purchase_country, currency, order_amount, order_lines, merchant_urls]
      properties:
        merchant_id: { type: string }
        purchase_country: { type: string }
        currency: { type: string }
        locale: { type: string }
        order_amount: { type: integer }
        order_lines:
          type: array
          items: { $ref: '#/components/schemas/OrderLine' }
        customer:
          type: object
          properties:
            email: { type: string, format: email }
            billing_address: { $ref: '#/components/schemas/Address' }
            shipping_address: { $ref: '#/components/schemas/Address' }
        merchant_urls:
          type: object
          required: [success, cancel, notification]
          properties:
            success: { type: string, format: uri }
            cancel: { type: string, format: uri }
            notification: { type: string, format: uri }
    Session:
      type: object
      properties:
        session_id: { type: string }
        client_token: { type: string }
        available_plans:
          type: array
          items: { type: string }
        expires_at:
          type: string
          format: date-time
    CreateOrderRequest:
      type: object
      required: [session_id, selected_plan, merchant_reference]
      properties:
        session_id: { type: string }
        selected_plan:
          type: string
          enum: [pay_in_30, pay_in_3, pay_in_4, financing_6m, financing_12m]
        merchant_reference: { type: string }
        billing_address: { $ref: '#/components/schemas/Address' }
        shipping_address: { $ref: '#/components/schemas/Address' }
        attachment:
          type: object
          properties:
            content_type: { type: string }
            body: { type: string, description: "base64-encoded EMD" }
    Order:
      type: object
      properties:
        order_id: { type: string }
        authorization_status:
          type: string
          enum: [authorized, canceled, expired, failed]
        payment_schedule:
          type: object
          properties:
            type: { type: string }
            count: { type: integer }
            first_charge_on_capture: { type: boolean }
        remaining_authorized_amount: { type: integer }
        captures:
          type: array
          items: { $ref: '#/components/schemas/Capture' }
    UpdateOrderRequest:
      type: object
      properties:
        billing_address: { $ref: '#/components/schemas/Address' }
        shipping_address: { $ref: '#/components/schemas/Address' }
        metadata:
          type: object
          additionalProperties: { type: string }
    CreateCaptureRequest:
      type: object
      required: [captured_amount]
      properties:
        capture_reference: { type: string }
        captured_amount: { type: integer }
        order_lines:
          type: array
          items: { $ref: '#/components/schemas/OrderLine' }
        shipping_info:
          type: object
          properties:
            carrier: { type: string }
            tracking_number: { type: string }
            tracking_uri: { type: string, format: uri }
            shipped_at: { type: string, format: date-time }
    Capture:
      type: object
      properties:
        capture_id: { type: string }
        status:
          type: string
          enum: [captured, pending, failed]
        amount: { type: integer }
        created_at: { type: string, format: date-time }
    CreateRefundRequest:
      type: object
      required: [amount]
      properties:
        refund_reference: { type: string }
        amount: { type: integer }
        capture_id: { type: string }
        order_lines:
          type: array
          items: { $ref: '#/components/schemas/OrderLine' }
    Refund:
      type: object
      properties:
        refund_id: { type: string }
        status:
          type: string
          enum: [accepted, failed, pending]
        amount: { type: integer }
        created_at: { type: string, format: date-time }
    CreateHppRequest:
      type: object
      required: [return_url, cancel_url]
      properties:
        return_url: { type: string, format: uri }
        cancel_url: { type: string, format: uri }
        state: { type: string, description: "CSRF token to be echoed back" }
        locale: { type: string }
        allowed_plans:
          type: array
          items: { type: string }
    HppSession:
      type: object
      properties:
        hpp_id: { type: string }
        redirect_url: { type: string, format: uri }
        expires_at: { type: string, format: date-time }
    WebhookEvent:
      type: object
      required: [id, type, created, data]
      properties:
        id: { type: string }
        type: { type: string }
        created: { type: string, format: date-time }
        data:
          type: object
          additionalProperties: true
        signature: { type: string, description: "HMAC over raw body + timestamp" }
    TestWebhookRequest:
      type: object
      required: [target, type]
      properties:
        target: { type: string, format: uri }
        type: { type: string }
        example:
          type: object
          additionalProperties: true
